import typing

T = typing.TypeVar("T")
F = typing.TypeVar("F", bound=typing.Callable[..., typing.Any])

def arg(*args, **kwargs) -> typing.Callable[[F], F]: ...
def env(*vars, **kwargs) -> str: ...
def add_arg(f: typing.Callable, *args, **kwargs) -> None: ...
def unauthenticated(f: typing.Callable) -> typing.Callable: ...
def isunauthenticated(f: typing.Callable) -> bool: ...
def service_type(stype: str) -> typing.Callable[[F], F]: ...
def get_service_type(f: typing.Callable) -> typing.Optional[str]: ...

class HookableMixin(object):
    @classmethod
    def add_hook(cls, hook_type: str, hook_func: typing.Callable): ...
    @classmethod
    def run_hooks(cls, hook_type: str, *args, **kwargs): ...

def safe_issubclass(*args) -> bool: ...
def is_uuid_like(val: typing.Any) -> bool: ...
